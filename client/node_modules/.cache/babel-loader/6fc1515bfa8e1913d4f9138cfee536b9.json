{"ast":null,"code":"import _classCallCheck from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/src/components/compDatabase.js\";\n// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Card, CardBody, CardTitle, Row, Col, Table, FormGroup, Label, Input } from \"reactstrap\";\n\nvar CompDB =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CompDB, _Component);\n\n  function CompDB() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CompDB);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CompDB)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      first: null,\n      last: null,\n      belt: null,\n      weightclass: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {\n      fetch(\"http://localhost:3001/api/getData\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.putDataToDB = function (first, last, belt, weightclass) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:3001/api/putData\", {\n        id: idToBeAdded,\n        first: first,\n        last: _this.state.last,\n        belt: _this.state.belt,\n        weightclass: _this.state.weightclass\n      });\n    };\n\n    _this.deleteFromDB = function (idTodelete) {\n      var objIdToDelete = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n\n      axios.delete(\"http://localhost:3001/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      var objIdToUpdate = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          first: updateToApply,\n          last: updateToApply,\n          belt: updateToApply,\n          weightclass: updateToApply\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CompDB, [{\n    key: \"componentDidMount\",\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has \n    // changed and implement those changes into our UI\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } // never let a process live forever \n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } // just a note, here, in the front end, we use the id key of our data object \n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify \n    // data base entries\n    // our first get method that uses our backend api to \n    // fetch data from our data base\n\n  }, {\n    key: \"render\",\n    // here is our UI\n    // it is easy to understand their functions when you \n    // see them render into our screen\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginLeft: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Enter your information!\"), React.createElement(Col, {\n        xl: \"4\",\n        lg: \"4\",\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"compinput\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            first: e.target.value\n          });\n        },\n        placeholder: \"First Name\",\n        style: {\n          width: \"220px\",\n          marginBottom: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xl: \"4\",\n        lg: \"4\",\n        md: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"compinput\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            last: e.target.value\n          });\n        },\n        placeholder: \"Last Name\",\n        style: {\n          width: \"220px\",\n          marginBottom: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })), React.createElement(Col, {\n        xl: \"7\",\n        lg: \"7\",\n        md: \"7\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        id: \"smallSelect\",\n        name: \"smallSelect\",\n        bsSize: \"sm\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            belt: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"none\",\n        defaultValue: \"\",\n        disabled: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Select Belt Level\"), React.createElement(\"option\", {\n        value: \"White\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"White\"), React.createElement(\"option\", {\n        value: \"Blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Blue\"), React.createElement(\"option\", {\n        value: \"Purple\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Purple\"), React.createElement(\"option\", {\n        value: \"Brown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Brown\"), React.createElement(\"option\", {\n        value: \"Black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Black\")))), React.createElement(Col, {\n        xl: \"7\",\n        lg: \"7\",\n        md: \"7\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        id: \"smallSelect\",\n        name: \"smallSelect\",\n        bsSize: \"sm\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            weightclass: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"none\",\n        defaultValue: \"\",\n        disabled: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Select Weight Class\"), React.createElement(\"option\", {\n        value: \"Light Feather\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Light Feather 53.5kg(118 lbs)\"), React.createElement(\"option\", {\n        value: \"Feather\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Feather 58.5kg(129 lbs)\"), React.createElement(\"option\", {\n        value: \"Light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"Light 64kg(141 lbs)\"), React.createElement(\"option\", {\n        value: \"Middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Middle 69kg(152 lbs)\"), React.createElement(\"option\", {\n        value: \"Medium Heavy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"Medium Heavy 74kg(163 lbs)\"), React.createElement(\"option\", {\n        value: \"Heavy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"No maximum weight\")))), React.createElement(Col, {\n        xl: \"6\",\n        lg: \"6\",\n        md: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.putDataToDB(_this2.state.first);\n        },\n        style: {\n          marginBottom: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"ADD\")))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(Table, {\n        Striped: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \" \", React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"All Competitors\"), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, \"Belt Class\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Weight Class\"))), data.length <= 0 ? \"NO DB ENTRIES YET\" : data.map(function (dat) {\n        return React.createElement(\"tbody\", {\n          key: data.first,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, dat.first, \" \"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, dat.last, \" \"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, dat.belt), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }, dat.weightclass));\n      })))));\n    }\n  }]);\n\n  return CompDB;\n}(Component);\n\nexport default CompDB;","map":{"version":3,"sources":["/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/src/components/compDatabase.js"],"names":["React","Component","axios","Card","CardBody","CardTitle","Row","Col","Table","FormGroup","Label","Input","CompDB","state","data","id","first","last","belt","weightclass","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","interval","setInterval","clearInterval","marginLeft","e","target","value","width","marginBottom","padding","length"],"mappings":"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","sourcesContent":["// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport { Card, CardBody, CardTitle, Row, Col, Table, FormGroup, Label, Input } from \"reactstrap\";\n\nclass CompDB extends Component {\n  // initialize our state \n  state = {\n    data: [],\n    id: 0,\n    first: null,\n    last: null,\n    belt: null,\n    weightclass: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has \n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever \n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object \n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify \n  // data base entries\n\n  // our first get method that uses our backend api to \n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:3001/api/getData\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = (first, last, belt, weightclass) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:3001/api/putData\", {\n      id: idToBeAdded,\n      first: first,\n      last: this.state.last,\n      belt: this.state.belt,\n      weightclass: this.state.weightclass\n    });\n  };\n\n\n  // our delete method that uses our backend api \n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"http://localhost:3001/api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"http://localhost:3001/api/updateData\", {\n      id: objIdToUpdate,\n      update: {\n        first: updateToApply,\n        last: updateToApply,\n        belt: updateToApply,\n        weightclass: updateToApply\n      }\n    });\n  };\n\n\n  // here is our UI\n  // it is easy to understand their functions when you \n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        {/* <Row>\n              <Col sm=\"12\">\n              <Table Striped>\n              \n              <thead> \n    <tr>\n        <th style={{ padding: \"10px\" }}>First Name</th>\n        <th>Last Name</th>\n        <th>Belt Class</th>\n        <th>Weight Class</th>\n    </tr>\n    </thead>\n   \n          {data.length <= 0\n            ? \"NO DB ENTRIES YET\"\n            : data.map(dat => (\n              \n                <tbody key={data.first}>\n                  <td>{dat.first} </td> \n                 \n                  <td>{dat.last} </td>\n                  \n                  <td>{dat.belt}</td>\n                  \n                  <td>{dat.weightclass}</td>\n                  \n                </tbody>\n              ))}\n              </Table>\n              </Col>\n            </Row> */}\n        <Row>\n          <div>\n            <h3\n              style={{ marginLeft: \"15px\" }}>Enter your information!</h3>\n            <Col xl=\"4\" lg=\"4\" md=\"12\">\n\n              <input\n                type=\"text\"\n                id=\"compinput\"\n                onChange={e => this.setState({ first: e.target.value })}\n                placeholder=\"First Name\"\n                style={{ width: \"220px\", marginBottom: \"10px\" }}\n              />\n            </Col>\n            <Col xl=\"4\" lg=\"4\" md=\"12\">\n              <input\n                type=\"text\"\n                id=\"compinput\"\n                onChange={e => this.setState({ last: e.target.value })}\n                placeholder=\"Last Name\"\n                style={{ width: \"220px\", marginBottom: \"10px\" }}\n              />\n            </Col>\n            {/* <Col xl=\"4\" lg=\"4\" md=\"12\">\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ belt: e.target.value })}\n            placeholder=\"Belt\"\n            style={{ width: \"220px\" }}\n          />\n          </Col> */}\n            {/* <input\n            type=\"text\"\n            onChange={e => this.setState({ weightclass: e.target.value })}\n            placeholder=\"Weight Class\"\n            style={{ width: \"200px\" }}\n          /> */}\n            <Col xl=\"7\" lg=\"7\" md=\"7\">\n              <FormGroup>\n                <Input type=\"select\" id=\"smallSelect\" name=\"smallSelect\" bsSize=\"sm\"\n                  onChange={e => this.setState({ belt: e.target.value })}>\n                  <option value=\"none\" defaultValue=\"\" disabled=\"\">\n                    Select Belt Level\n                      </option>\n                  <option value=\"White\">White</option>\n                  <option value=\"Blue\">Blue</option>\n                  <option value=\"Purple\">Purple</option>\n                  <option value=\"Brown\">Brown</option>\n                  <option value=\"Black\">Black</option>\n                </Input>\n              </FormGroup>\n            </Col>\n            <Col xl=\"7\" lg=\"7\" md=\"7\">\n              <FormGroup>\n                <Input type=\"select\" id=\"smallSelect\" name=\"smallSelect\" bsSize=\"sm\"\n                  onChange={e => this.setState({ weightclass: e.target.value })}>\n                  <option value=\"none\" defaultValue=\"\" disabled=\"\">\n                    Select Weight Class\n                      </option>\n                  <option value=\"Light Feather\">Light Feather 53.5kg(118 lbs)</option>\n                  <option value=\"Feather\">Feather 58.5kg(129 lbs)</option>\n                  <option value=\"Light\">Light 64kg(141 lbs)</option>\n                  <option value=\"Middle\">Middle 69kg(152 lbs)</option>\n                  <option value=\"Medium Heavy\">Medium Heavy 74kg(163 lbs)</option>\n                  <option value=\"Heavy\">No maximum weight</option>\n                </Input>\n              </FormGroup>\n            </Col>\n            <Col xl=\"6\" lg=\"6\" md=\"6\">\n              <button\n                onClick={() => this.putDataToDB(this.state.first)}\n                style={{ marginBottom: \"20px\" }}\n              >\n                ADD\n          </button>\n            </Col>\n          </div>\n        </Row>\n        <Row>\n          <Col sm=\"12\">\n            <Table Striped>\n\n              <thead> <h3>All Competitors</h3>\n                <tr>\n                  <th style={{ padding: \"10px\" }}>First Name</th>\n                  <th>Last Name</th>\n                  <th>Belt Class</th>\n                  <th>Weight Class</th>\n                </tr>\n              </thead>\n\n              {data.length <= 0\n                ? \"NO DB ENTRIES YET\"\n                : data.map(dat => (\n\n                  <tbody key={data.first}>\n                    <td>{dat.first} </td>\n\n                    <td>{dat.last} </td>\n\n                    <td>{dat.belt}</td>\n\n                    <td>{dat.weightclass}</td>\n\n                  </tbody>\n                ))}\n            </Table>\n          </Col>\n        </Row>\n      </div>\n\n    );\n  }\n}\n\nexport default CompDB;"]},"metadata":{},"sourceType":"module"}