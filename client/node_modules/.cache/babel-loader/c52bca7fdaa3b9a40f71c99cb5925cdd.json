{"ast":null,"code":"import _classCallCheck from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/src/components/GoogleMaps.js\";\nimport React, { Component } from \"react\";\nimport { render } from 'react-dom';\nimport Map from \"./Map\";\nimport InfoWindow from \"./InfoWindow\";\nimport API from \"../utility/API\"; // import { FormGroup, Label, Input, Col, Button, Row } from \"reactstrap\";\n\nvar GoogleMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GoogleMap, _Component);\n\n  function GoogleMap() {\n    var _this;\n\n    _classCallCheck(this, GoogleMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GoogleMap).call(this));\n    _this.createInfoWindow = _this.createInfoWindow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      value: \"\",\n      lat: \"\",\n      lng: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(GoogleMap, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      event.preventDefault();\n      this.setState({\n        value: event.target.value\n      });\n    } // Handling the user inputted zipcode once they click \"Submit\"\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      this.setState({\n        value: event.target.value\n      });\n      API.getFromGeo(this.state.value).then(function (res) {\n        _this2.setState({\n          lat: res.data.results[0].geometry.location.lat,\n          lng: res.data.results[0].geometry.location.lng\n        });\n      }).catch(function (err) {\n        return err;\n      });\n    } // Creates the info window element\n\n  }, {\n    key: \"createInfoWindow\",\n    value: function createInfoWindow(e, map, results, thisComponent) {\n      var infoWindow = new window.google.maps.InfoWindow({\n        content: '<div id=\"infoWindow\" />',\n        position: {\n          lat: e.latLng.lat(),\n          lng: e.latLng.lng()\n        }\n      });\n      infoWindow.addListener('domready', function (e) {\n        var name;\n        var address;\n\n        for (var i = 0; i < results.length; i++) {\n          if (thisComponent.position.lat() === results[i].geometry.location.lat()) {\n            name = results[i].name;\n            address = results[i].formatted_address;\n          }\n        }\n\n        render(React.createElement(InfoWindow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), document.getElementById('infoWindow'));\n        infoWindow.setContent(name + \"</br>\" + address);\n      });\n      infoWindow.open(map);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Enter a zipcode to find gyms near you!\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.value,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), this.state.lat && this.state.lng && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Map // Initial map settings. Zoom and center.\n      , {\n        id: \"myMap\",\n        options: {\n          center: {\n            lat: this.state.lat,\n            lng: this.state.lng\n          },\n          zoom: 11\n        },\n        onMapLoad: function onMapLoad(map) {\n          // Initializing the Google Places Service\n          var service = new window.google.maps.places.PlacesService(map); // Returning JSON data from Google Places based on our query, location, and radius in meters\n\n          var request = {\n            query: \"jiu jitsu gym\",\n            location: {\n              lat: _this3.state.lat,\n              lng: _this3.state.lng\n            },\n            radius: \"10000\"\n          };\n          var thisComponent = _this3; // Creating markers based on JSON data we received\n\n          service.textSearch(request, function (results, status) {\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n              var _loop = function _loop() {\n                lat = results[i].geometry.location.lat();\n                lng = results[i].geometry.location.lng();\n                image = {\n                  url: process.env.PUBLIC_URL + '/kimono.png',\n                  scaledSize: new window.google.maps.Size(40, 43),\n                  origin: new window.google.maps.Point(0, 0),\n                  anchor: new window.google.maps.Point(0, 32) // Creates the markers on the map\n\n                };\n                var marker = new window.google.maps.Marker({\n                  position: {\n                    lat: lat,\n                    lng: lng\n                  },\n                  map: map,\n                  icon: image\n                }); // When a marker is clicked an info window pops up\n\n                marker.addListener('click', function (e) {\n                  thisComponent.createInfoWindow(e, map, results, marker);\n                });\n              };\n\n              for (var i = 0; i < results.length; i++) {\n                var lat;\n                var lng;\n                var image;\n\n                _loop();\n              }\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return GoogleMap;\n}(Component);\n\nexport default GoogleMap;","map":{"version":3,"sources":["/Users/davidbyrd/U of R/Project-3/demo/BracketBuilderReactApex/client/src/components/GoogleMaps.js"],"names":["React","Component","render","Map","InfoWindow","API","GoogleMap","createInfoWindow","bind","handleChange","handleSubmit","state","value","lat","lng","event","preventDefault","setState","target","getFromGeo","then","res","data","results","geometry","location","catch","err","e","map","thisComponent","infoWindow","window","google","maps","content","position","latLng","addListener","name","address","i","length","formatted_address","document","getElementById","setContent","open","center","zoom","service","places","PlacesService","request","query","radius","textSearch","status","PlacesServiceStatus","OK","image","url","process","env","PUBLIC_URL","scaledSize","Size","origin","Point","anchor","marker","Marker","icon"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from 'react-dom';\nimport Map from \"./Map\";\nimport InfoWindow from \"./InfoWindow\";\nimport API from \"../utility/API\";\n// import { FormGroup, Label, Input, Col, Button, Row } from \"reactstrap\";\n\nclass GoogleMap extends Component {\n\n    constructor() {\n        super();\n        this.createInfoWindow = this.createInfoWindow.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = {\n            value: \"\",\n            lat: \"\",\n            lng: \"\"\n        }\n    }\n\n    handleChange(event) {\n        event.preventDefault();\n        this.setState({ value: event.target.value });\n    }\n\n    // Handling the user inputted zipcode once they click \"Submit\"\n    handleSubmit(event) {\n        event.preventDefault();\n        this.setState({ value: event.target.value });\n        API.getFromGeo(this.state.value).then((res) => {\n            this.setState({\n                lat: res.data.results[0].geometry.location.lat,\n                lng: res.data.results[0].geometry.location.lng\n            })\n        }).catch(err => {\n            return err\n        })\n    }\n\n    // Creates the info window element\n    createInfoWindow(e, map, results, thisComponent) {\n        const infoWindow = new window.google.maps.InfoWindow({\n            content: '<div id=\"infoWindow\" />',\n            position: { lat: e.latLng.lat(), lng: e.latLng.lng() }\n        })\n        infoWindow.addListener('domready', e => {\n            var name;\n            var address;\n            for (var i = 0; i < results.length; i++) {\n                if (thisComponent.position.lat() === results[i].geometry.location.lat()) {\n                    name = results[i].name\n                    address = results[i].formatted_address\n                }\n            }\n            render(<InfoWindow />, document.getElementById('infoWindow'))\n            infoWindow.setContent(name + \"</br>\" + address);\n        })\n        infoWindow.open(map)\n    }\n\n    render() {\n        return (\n            <div>\n                {/* <Row>\n                    <Col xl=\"4\" lg=\"6\" md=\"12\">\n                        <FormGroup>\n                            <Label for=\"pinput\">Enter a zipcode to find gyms near you!</Label>\n                            <Input type=\"text\" id=\"pinput\" name=\"pinput\" placeholder=\"Enter Zipcode\" />\n                            <Button className=\"gradient-nepal\" >Search</Button>{\" \"}\n                        </FormGroup>\n                    </Col>\n                </Row> */}\n                <form>\n                    <label>Enter a zipcode to find gyms near you!\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />\n                </form>\n                {/* If we succesfully receive latitude and longitude coordinates, load the map */}\n                {this.state.lat && this.state.lng &&\n                    <div>\n                        <Map\n                            // Initial map settings. Zoom and center.\n                            id=\"myMap\"\n                            options={{\n                                center: { lat: (this.state.lat), lng: (this.state.lng) },\n                                zoom: 11\n                            }}\n                            onMapLoad={map => {\n                                // Initializing the Google Places Service\n                                var service = new window.google.maps.places.PlacesService(map);\n                                // Returning JSON data from Google Places based on our query, location, and radius in meters\n                                var request = {\n                                    query: \"jiu jitsu gym\",\n                                    location: { lat: (this.state.lat), lng: (this.state.lng) },\n                                    radius: \"10000\"\n                                }\n                                var thisComponent = this;\n                                // Creating markers based on JSON data we received\n                                service.textSearch(request, function (results, status) {\n                                    if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n                                        for (var i = 0; i < results.length; i++) {\n                                            var lat = (results[i].geometry.location.lat())\n                                            var lng = (results[i].geometry.location.lng())\n                                            var image = {\n                                                url: (process.env.PUBLIC_URL + '/kimono.png'),\n                                                scaledSize: new window.google.maps.Size(40, 43),\n                                                origin: new window.google.maps.Point(0, 0),\n                                                anchor: new window.google.maps.Point(0, 32)\n                                            }\n                                            // Creates the markers on the map\n                                            const marker = new window.google.maps.Marker({\n                                                position: { lat: lat, lng: lng },\n                                                map: map,\n                                                icon: image,\n                                            });\n                                            // When a marker is clicked an info window pops up\n                                            marker.addListener('click', e => {\n                                                thisComponent.createInfoWindow(e, map, results, marker)\n                                            })\n                                        }\n                                    }\n                                });\n                            }}\n                        />\n                    </div>\n                }\n            </div>\n        )\n            ;\n    }\n}\n\nexport default GoogleMap;"]},"metadata":{},"sourceType":"module"}